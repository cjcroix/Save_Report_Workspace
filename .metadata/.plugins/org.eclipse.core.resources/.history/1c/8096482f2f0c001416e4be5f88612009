package org.apache.jmeter.visualizers;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

import javax.swing.table.DefaultTableModel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.data.category.DefaultCategoryDataset;

import au.com.bytecode.opencsv.CSVReader;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * Class used for creating a PDF test report.It may be used on 2 occasions
 * </p>1. to create the PDF report at the end of the test </p>2.To extract a PDF
 * report from a saved CSV summary report.
 * 
 * @author Save Report Project Group 2014
 * 
 */
class CreatePdfReport {
	private DefaultTableModel summaryTableModel = new DefaultTableModel();
	private DefaultTableModel errorTableModel = new DefaultTableModel();
	private String summaryCsvFile;
	private String reportPdfFile;
	private Boolean isAggregate= true;
	private String outputDirectory;
	String[] aggregatePdfHeaders = { "Sample Label", "Sample Count",
			"Average (ms)", "90% Line (ms)", "Min (ms)", "Max (ms)", "Error %",
	"Throughput (ms)" };
	String[] summaryPdfHeaders = { "Sample Label", "Sample Count",
			"Average (ms)", "Min (ms)", "Max (ms)", "Error %",
	"Throughput (ms)" };
	private Font headerFont = new Font(Font.FontFamily.COURIER, 12, Font.BOLD);
	private Font rowFont = new Font(Font.FontFamily.COURIER, 11, Font.NORMAL);
	static BaseColor clr = new BaseColor(0, 44, 94);
	static BaseColor clr2 = new BaseColor(102, 0, 51);
	private Font subFont = new Font(Font.FontFamily.HELVETICA, 16, Font.BOLD,
			clr);
	private Font subFont2 = new Font(Font.FontFamily.COURIER, 16, Font.NORMAL,
			clr2);
	private Font small = new Font(Font.FontFamily.COURIER, 12);

	/**
	 * This function is called by the save report object. It is used to
	 * initialize the data members of this class.
	 * 
	 * @param reportOutputDir
	 * @param csvFile1
	 * @param csvFile2
	 * @throws IOException
	 * @throws DocumentException
	 */
	public void initialize(String reportOutputDir, String fileName,
			Boolean includeErrorReport, String summaryFilePath,
			DefaultTableModel errorTable) throws IOException, DocumentException {
		summaryCsvFile = summaryFilePath;
		reportPdfFile = reportOutputDir + File.separatorChar + "TestReport"
				+ "_" + GetTimeStampInHMS() + ".pdf";
		errorTableModel = errorTable;
		outputDirectory = reportOutputDir;
		isAggregateOrSummary();
		if(isAggregate)
		createAggregateModel();
		else
			createSummaryModel();
		createPdf(includeErrorReport);
	}

	private void isAggregateOrSummary() {
		// TODO Auto-generated method stub
		File testFile =new File(summaryCsvFile);
		Scanner fscan=null;
		try {
		 fscan= new Scanner(testFile);
			if(fscan.findInLine("aggregate_report_median").compareTo("aggregate_report_median")==0)
				isAggregate= true;
			else
				isAggregate= false;
			

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(NullPointerException e){
			isAggregate= false;
		}
		
		finally{
			fscan.close();
		}
	}

	/**
	 * Creates a DefaultTableModel model from a CSV file containing the test
	 * summary.
	 * 
	 * @param csvFile
	 * @return
	 * @throws IOException
	 * @throws DocumentException
	 */
	public synchronized void createAggregateModel() throws IOException,
	DocumentException {
		for (int i = 0; i < 10; i++)
			summaryTableModel.addColumn(SaveReport.COLUMNS[i]);
		FileReader fr;
		try {
			fr = new FileReader(summaryCsvFile);
			CSVReader cr = new CSVReader(fr);
			String[] row1;
			cr.readNext();
			while (true) {
				synchronized (this) {
					row1 = cr.readNext();
					if (row1 == null)
						break;
					else {
						summaryTableModel.addRow(row1);
						summaryTableModel.setValueAt(Double.parseDouble(summaryTableModel.getValueAt(summaryTableModel.getRowCount()-1, 7).toString())*100,summaryTableModel.getRowCount()-1 , 7);

					}
				}
			}
			cr.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public synchronized void createSummaryModel() throws IOException,
	DocumentException {
		
		 String[] COLUMNS = {
		            "sampler_label",               //$NON-NLS-1$
		            "aggregate_report_count",      //$NON-NLS-1$
		            "average",                     //$NON-NLS-1$
		            "aggregate_report_min",        //$NON-NLS-1$
		            "aggregate_report_max",        //$NON-NLS-1$
		            "aggregate_report_stddev",     //$NON-NLS-1$
		            "aggregate_report_error%",     //$NON-NLS-1$
		            "aggregate_report_rate",       //$NON-NLS-1$
		            "aggregate_report_bandwidth",  //$NON-NLS-1$
		            "average_bytes",               //$NON-NLS-1$
		            };
		for (int i = 0; i < 10; i++)
			summaryTableModel.addColumn(COLUMNS[i]);
		FileReader fr;
		try {
			fr = new FileReader(summaryCsvFile);
			CSVReader cr = new CSVReader(fr);
			String[] row1;
			cr.readNext();
			while (true) {
				synchronized (this) {
					row1 = cr.readNext();
					if (row1 == null)
						break;
					else {
						summaryTableModel.addRow(row1);
						summaryTableModel.setValueAt(Double.parseDouble(summaryTableModel.getValueAt(summaryTableModel.getRowCount()-1, 6).toString())*100,summaryTableModel.getRowCount()-1 , 6);
					}
				}
			}
			cr.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Creates the PDF test report
	 * 
	 * @throws DocumentException
	 * @throws IOException
	 */
	private void createPdf(Boolean includeErrors) throws IOException,
	DocumentException {
		// step 1
		Document document = new Document();
		// step 2
		FileOutputStream fos = new FileOutputStream(reportPdfFile);
		PdfWriter.getInstance(document, fos);
		// step 3
		document.open();
		// step 4
		Font titleFont = new Font(Font.FontFamily.HELVETICA, 30, Font.BOLD, clr);
		Paragraph emptyLine = new Paragraph();
		emptyLine.add(new Paragraph(" "));
		emptyLine.add(new Paragraph(" "));
		Paragraph title = new Paragraph("Test Report", titleFont);
		title.setAlignment(Element.ALIGN_CENTER);
		document.add(title);
		document.add(emptyLine);
		emptyLine = new Paragraph(" ");
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat(
				"E yyyy.MM.dd 'at' hh:mm:ss a zzz");
		document.add(new Paragraph("Report created on : " + ft.format(dNow),
				small));
		document.add(emptyLine);
		document.add(emptyLine);
		document.add(emptyLine);
		if (includeErrors == true){
			if(isAggregate)
					document.add(new Paragraph("Aggregate Report", subFont));
			else
				document.add(new Paragraph("Summary Report", subFont));

		}
		else {
			if(isAggregate)
			document.add(new Paragraph(
					"Aggregate Report extracted from file : ", subFont));
			else
				document.add(new Paragraph(
						"Summary Report extracted from file : ", subFont));
			File summaryFile = new File(summaryCsvFile);
			document.add(new Paragraph(summaryFile.getName(), subFont2));
		}
		PdfPTable table =null;
		if(isAggregate)
			   table = createAggregateTable();
		else
			table =createSummaryTable();
		
		document.add(new Paragraph(" "));
		document.add(emptyLine);
		document.add(table);
		table.setSpacingBefore(5);
		table.setSpacingAfter(5);

		if (includeErrors == true) {
			document.add(emptyLine);
			document.add(emptyLine);
			document.add(emptyLine);
			document.add(new Paragraph("Error Report", subFont));
			document.add(emptyLine);
			document.add(emptyLine);
			PdfPTable table2 = createTable2();

			if(table2.size()==1)
				document.add(new Paragraph("No Errors occourred.", subFont2));
			else
				document.add(table2);
			table2.setSpacingBefore(5);
			table2.setSpacingAfter(5);
		}

		Image[] graph = new Image[5];
		String[] imageFiles = { "average.jpg", "sampleCount.jpg",
				"errorPercent.jpg", "throughput.jpg", "ninetyPercentLine.jpg" };
		graph[0] = createGraphs("Average Response Time of samples",
				"Average(ms)", 2, imageFiles[0]); 													
		graph[1] = createGraphs("Number of samples processed for each Request",
				"Number of Samples", 1, imageFiles[1]);
		if(isAggregate)
			graph[2] = createGraphs("Error % of samples for each Request",
				"Error %", 7, imageFiles[2]);
		else
			graph[2] = createGraphs("Error % of samples for each Request",
					"Error %", 6, imageFiles[2]);
		if(isAggregate)
		graph[3] = createGraphs("Throughput of samples for each Request",
				"Throughput(ms)", 8, imageFiles[3]);
		else
			graph[3] = createGraphs("Throughput of samples for each Request",
					"Throughput(ms)", 7, imageFiles[3]);
		if(isAggregate)	
		graph[4] = createGraphs("90 % Line of samples for each Request",
				"90% line(ms)", 4, imageFiles[4]);

		document.newPage();
		document.add(new Paragraph("Graphs ", subFont));
		document.add(emptyLine);
		document.add(graph[0]);
		document.add(graph[1]);
		document.add(graph[2]);
		document.add(graph[3]);
		if(isAggregate)
		document.add(graph[4]);
		// release resources
		document.close();
		document = null;
		fos.close();

	}

	/**
	 * Formats the values that are written to the PDF and withe the required
	 * precision.
	 * 
	 * @param value
	 * @return
	 */
	private String setValuePrecision(Object value) {
		String valueString = value.toString();
		double number;
		try {
			if (valueString.substring(0, 1).matches("[0-9]")) { 
				//check if string contains numbers or characters
				number = Double.parseDouble(valueString);
				if (number == Math.floor(number)) 
					// Check if the value is an integer value
					return valueString;
				else {
					valueString = String.format("%.4f", number);
					return valueString;
				}
			} else
				return valueString;
		} catch (java.lang.NumberFormatException E) {
			return value.toString();
		} catch (Exception e) {
			return value.toString();
		}
	}

	/**
	 * Creates a PdfTable table from the summary report model.This table is
	 * written to the PDF
	 * 
	 * @return
	 * @throws DocumentException
	 */
	public PdfPTable createAggregateTable() throws DocumentException {

		PdfPTable table = new PdfPTable(8);

		table.setWidthPercentage(570 / 5.23f);
		table.setWidths(new int[] { 6, 5, 3, 4, 3, 3, 3, 5 });
		PdfPCell cell = null;
		for (int k = 0; k < 8; k++) {
			{
				cell = new PdfPCell(
						new Phrase(aggregatePdfHeaders[k], headerFont));
				BaseColor BC = new BaseColor(164, 188, 196);
				cell.setBackgroundColor(BC);
				cell.setColspan(1);
				table.addCell(cell);
			}
		}

		for (int l = 0; l < summaryTableModel.getRowCount(); l++)
			// row count does not include table headers
			for (int k = 0; k < 10; k++) {
				if (k != 3 && k != 9) {
					cell = new PdfPCell(
							new Phrase(setValuePrecision(summaryTableModel
									.getValueAt(l, k)), rowFont));
					cell.setGrayFill(2);
					table.addCell(cell);
				}
			}
		return table;

	}
	
	public PdfPTable createSummaryTable() throws DocumentException {

		PdfPTable table = new PdfPTable(7);

		table.setWidthPercentage(570 / 5.23f);
		table.setWidths(new int[]  { 6, 5, 3, 3, 3, 3, 5 });
		PdfPCell cell = null;
		for (int k = 0; k < 7; k++) {
			{
				cell = new PdfPCell(
						new Phrase(summaryPdfHeaders[k], headerFont));
				BaseColor BC = new BaseColor(164, 188, 196);
				cell.setBackgroundColor(BC);
				cell.setColspan(1);
				table.addCell(cell);
			}
		}

		for (int l = 0; l < summaryTableModel.getRowCount(); l++)
			// row count does not include table headers
			for (int k = 0; k < 10; k++) {
				if (k != 5 && k!=8 && k != 9) {
					cell = new PdfPCell(
							new Phrase(setValuePrecision(summaryTableModel
									.getValueAt(l, k)), rowFont));
					cell.setGrayFill(2);
					table.addCell(cell);
				}
			}
		return table;

	}
	
	

	/**
	 * Creates a PdfTable table from the error report model.This table is
	 * written to the PDF
	 * 
	 * @return
	 * @throws DocumentException
	 */
	private PdfPTable createTable2() throws DocumentException {
		PdfPTable table = new PdfPTable(4);

		table.setWidthPercentage(570 / 5.23f);
		table.setWidths(new int[] { 1, 3, 2, 4 });
		PdfPCell cell = null;
		for (int k = 0; k < 4; k++) {
			{
				cell = new PdfPCell(new Phrase(
						errorTableModel.getColumnName(k), headerFont));
				BaseColor BC = new BaseColor(164, 188, 196);
				cell.setBackgroundColor(BC);
				cell.setColspan(1);
				table.addCell(cell);
			}
		}

		for (int l = 0; l < errorTableModel.getRowCount(); l++)
			// row count does not include table headers
			for (int k = 0; k < 4; k++) {

				cell = new PdfPCell(new Phrase(errorTableModel.getValueAt(l, k)
						.toString(), rowFont));
				cell.setGrayFill(2);
				table.addCell(cell);
			}
		return table;
	}

	/**
	 * Creates and returns the graphs representing data from the summary table.
	 * 
	 * @param chartName
	 * @param colName
	 * @param colNo
	 * @param graphName
	 * @return
	 */
	public synchronized Image createGraphs(String chartName, String colName,
			int colNo, String graphName) {
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		for (int i = 0; i < summaryTableModel.getRowCount() - 1; i++)

		{
			try {
				dataset.setValue(
						(Number) summaryTableModel.getValueAt(i, colNo),
						colName, summaryTableModel.getValueAt(i, 0).toString());

			} catch (Exception e) {
				dataset.setValue((Number) Float
						.parseFloat((String) summaryTableModel.getValueAt(i,
								colNo)), colName,
								summaryTableModel.getValueAt(i, 0).toString());
			} finally {

			}
		}
		ChartFactory.setChartTheme(StandardChartTheme.createDarknessTheme());

		final JFreeChart chart = ChartFactory.createBarChart3D(chartName, // chart
				// title
				"Requests", // domain axis label
				colName, // range axis label
				dataset, // data
				PlotOrientation.VERTICAL, // orientation
				true, // include legend
				true, // tooltips
				false // urls
				);

		final CategoryPlot plot = chart.getCategoryPlot();

		final CategoryAxis axis = plot.getDomainAxis();
		double angle = Math.PI / 4.0;
		if (angle > Math.PI / 2.0)
			angle = Math.PI / 2.0;
		axis.setCategoryLabelPositions(CategoryLabelPositions
				.createUpRotationLabelPositions(angle)); // (Math.PI / 2.5) );
		final BarRenderer3D renderer = (BarRenderer3D) plot.getRenderer();
		renderer.setDrawBarOutline(false);
		renderer.setMaximumBarWidth(0.10);
		try {
			ChartUtilities.saveChartAsJPEG(new File(outputDirectory
					+ File.separatorChar + graphName), chart,
					getChartWidth(summaryTableModel.getRowCount()), 560);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		Image graph = null;
		try {
			graph = Image.getInstance(outputDirectory + File.separatorChar
					+ graphName);
		} catch (BadElementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		graph.scalePercent(getScaleFactor(summaryTableModel.getRowCount()));
		return graph;
	}

	/**
	 * Returns the width of the graph as a function of the total number of
	 * distinct requests to be shown in the graph.
	 * 
	 * @param rowCount
	 * @return
	 */
	public int getChartWidth(int rowCount) {
		if (rowCount <= 40)
			return (840);
		else
			return (21 * rowCount);
	}

	/**
	 * Returns the scale factor to be used to scale the graph as a function of
	 * the total number of distinct requests to be shown in the graph.
	 * 
	 * @param rowCount
	 * @return
	 */
	public float getScaleFactor(int rowCount) {
		if (rowCount <= 40)
			return (float) (62.5);
		else {
			float factor = (float) (62.5 * 840.0 / getChartWidth(rowCount));
			return factor;
		}
	}

	/**
	 * Returns a timestamp of the form yyyy-MM-dd_HH-mm-ss
	 * 
	 * @return String containing the timestamp
	 */
	private String GetTimeStampInHMS() {

		long epoch = System.currentTimeMillis() / 1000;
		String date = new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss")
		.format(new java.util.Date(epoch * 1000));
		return date;
	}
}